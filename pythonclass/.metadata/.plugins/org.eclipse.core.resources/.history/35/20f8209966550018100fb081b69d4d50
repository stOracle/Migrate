# code to get a knight around a chess board without repeating a square
# given any square
# ------------------------------------

import random

# initializes the board 
def makeBoard(s, x, y):
    board = []
    for i in range(s):
        row = []
        for j in range(s):
            row.append([i, j, 0])
#            if (i == x) and (j == y):
#                row.append([i, j, 1])
#            else:
#                row.append([i, j, 0])
        board.append(row)
    return board

def gameWon(board):
    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j][2] == 0:
                return False
    return True

# prints the board in a easy to understand layout
def printBoard(n):
    board_str = ""
    for i in range(len(n[0])):
        st = ""
        for j in range(len(n[i])):
            st += "| {:>2} ".format(n[i][j][2])
        st += "|\n"
        board_str += st
    print(board_str)
    return None

# given coordinates (x, y), this function will 
# give you a list of all coordinates possible to move to
def options(x, y, hist, level):
    options = []
    hard = (-2, -1, 2, 1)
    
    for i in range(0, 4):
        if (x + hard[i] < 0) or (x + hard[i] > len(hist[0]) - 1):
            continue
        else:
            if i % 2 == 0:
                if not ((y - 1 < 0) or (y + 1 > len(hist[0]) - 1)):
                    options.append([x + hard[i], y - 1])
                    options.append([x + hard[i], y + 1])
                elif (y - 1 < 0):
                    options.append([x + hard[i], y + 1])
                elif (y + 1 > len(hist[0])):
                    options.append([x + hard[i], y - 1])
                else:
                    continue
            else:
                if not ((y - 2 < 0) or (y + 2 > len(hist[0]) - 1)):
                    options.append([x + hard[i], y - 2])
                    options.append([x + hard[i], y + 2])
                elif (y - 2 < 0):
                    options.append([x + hard[i], y + 2])
                elif (y + 2 > len(hist[0]) - 1):
                    options.append([x + hard[i], y - 2])
                else:
                    continue
                
    bad = []
    for i in range(len(options)):
        if hist[options[i][0]][options[i][1]][2] != 0:
            bad.append(i)
    bad.reverse()
    for i in range(len(bad)):
        options.pop(bad[i])
    if level == 1:
        return len(options)
    else:
        return options

# given coordinates (x, y), this function will pass to the next appropriate move
def move(x, y, hist, level):
    
    if (level <= 25):
        hist[x][y][2] = level
    # marks the spot we are at
    
    
    print("------------------------------")
    printBoard(hist)
    print("Level = {}".format(level))
    print("Location = ({}, {})".format(x, y))
    if (level == 1):
        return (move(3, 2, hist, level + 1))
    if (level == 2):
        return (move(4, 0, hist, level + 1))
    if (level == 3):
        return (move(2, 1, hist, level + 1))
    if (level == 4):
        return (move(0, 0, hist, level + 1))
    if (level == 5):
        return (move(1, 2, hist, level + 1))
    if (level == 6):
        return (move(0, 4, hist, level + 1))
    if (level == 7):
        return (move(2, 3, hist, level + 1))
    if (level == 8):
        return (move(4, 2, hist, level + 1))
    if (level == 9):
        return (move(3, 0, hist, level + 1))
    if (level == 10):
        return (move(1, 1, hist, level + 1))
    if (level == 11):
        return (move(0, 3, hist, level + 1))
    if (level == 12):
        return (move(2, 4, hist, level + 1))
    if (level == 13):
        return (move(4, 3, hist, level + 1))
    if (level == 14):
        return (move(3, 1, hist, level + 1))
    if (level == 15):
        return (move(1, 0, hist, level + 1))
    if (level == 16):
        return (move(0, 2, hist, level + 1))
    if (level == 17):
        return (move(1, 4, hist, level + 1))
    if (level == 18):
        return (move(3, 3, hist, level + 1))
    if (level == 19):
        return (move(4, 1, hist, level + 1))
    if (level == 20):
        return (move(2, 0, hist, level + 1))
    if (level == 21):
        return (move(0, 1, hist, level + 1))
    if (level == 22):
        return (move(1, 3, hist, level + 1))
    if (level == 23):
        return (move(3, 4, hist, level + 1))
    #if (level == 24):
    #    return (move(2, 2, hist, level + 1))
    #if (level == 25):
    #    return (move(3, 2, hist, level + 1))
    
    
    
    # makes a list of available moves
    moves = options(x, y, hist, 0)
    
    # makes a list of how many moves the following move can make
    degrees = []
    for i in moves:
        degree = options(i[0], i[1], hist, 1)
        degrees.append(degree)
        

        
    print ('move list =', moves)
    print('degrees = ', degrees)
    print("options = {}".format(moves))
    #return True

    # Tests if we have filled the board
    if gameWon(hist):
        print ("YOU DID IT")
        return True
    
    #elif (level > 70):
        #return True
        
    # for testing if the game has gotten to a certain amount of moves
    #elif (level > 15):
    #    return True
    
    # in the case of hitting the end of a route, this format runs
    elif len(moves) == 0:
        hist[x][y][2] = 0
        print("no options for ({}, {})! Going Back!".format(x, y))
        print("-----------------------------------")
        print("-------END OF PATH (LEVEL: {})-----".format(level))
        print("-----------------------------------")
        return False
    
    # the typical case of having more options 
    else:
        
        # searches for the option with the most degrees
        #for i in range(len(moves)):
            #print("\nStart!")
            #print("Level = {}".format(level))
            #print("options = {}".format(moves))
            #print("choice = {}".format(choice))
            #print("moving to ({}, {})!".format(moves[i][0], moves[i][1]))
                       
            #printBoard(hist)
            #print("End!")
            #if (move(moves[i][0], moves[i][1], hist, level + 1)): 
                #return True
        #hist[x][y][2] = 0
        #return True
    
        # until it has no options left, it recursively trials through the options it has
        while len(moves) > 0:
            #print("\nStart!")
            #print("Level = {}".format(level))
            #print("options = {}".format(moves))
            #print("choice = {}".format(choice))
            #print("moving to ({}, {})!".format(moves[-1][0], moves[-1][1]))
            #printBoard(hist)
            hi = max(degrees)
            hi_i = 0
            for i in range(len(degrees)):
                if degrees[i] == hi:
                    hi_i = i
                    break
            
            #printBoard(hist)
            print ("hi_i = ", hi_i)
            print('moves = ', moves)
            if (move(moves[hi_i][0], moves[hi_i][1], hist, level + 1)):
                return True
                break
            moves.pop(hi_i)
            degrees.pop(hi_i)
            
        if gameWon(hist):
            print("gameWon")
            return True
        
        hist[x][y][2] = 0  
        print('going down to level {}'.format(level - 1))  
        return False    

def main():
    print("\nLet's solve Knights Journey!\n")
    start_x = 4
    start_y = 4
    #choice = input(str("Our starting position will be ({}, {}). Ready?".format(start_x, start_y)))
    #while choice != 'y':
        #choice = input(str("Our starting position will be ({}, {}). Ready?".format(start_x, start_y)))
    size = 5
    board = makeBoard(size, start_x, start_y)
   
    
    
    x = move(start_x, start_y, board, 1)
    print(x)
    print("out")
    
    
    
main() 