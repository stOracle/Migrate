# code to get a knight around a chess board without repeating a square
# given any square
# ------------------------------------

import random
import time

# initializes the board 
def makeBoard(s, x, y):
    board = []
    for i in range(s):
        row = []
        for j in range(s):
            row.append([i, j, 0])
#            if (i == x) and (j == y):
#                row.append([i, j, 1])
#            else:
#                row.append([i, j, 0])
        board.append(row)
    return board

def gameWon(board):
    return False
    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j][2] == 0:
                return False
    return True

# prints the board in a easy to understand layout
def printBoard(n):
    board_str = ""
    for i in range(len(n[0])):
        st = ""
        for j in range(len(n[i])):
            st += "| {:>2} ".format(n[i][j][2])
        st += "|\n"
        board_str += st
    print(board_str)
    return None

# given coordinates (x, y), this function will 
# give you a list of all coordinates possible to move to
def options(x, y, hist, level):
    
    diff = ((-2, -1),(-2, 1),(2,-1),(2,1),(-1,-2),(-1,2),(1,-2),(1,2))
    options = []
    for choice in diff:
        if (x + choice[0] < 0) or (x + choice[0] > len(hist[0]) - 1):
            continue
        elif (y + choice[1] < 0) or (y + choice[1] > len(hist[0]) -1):
            continue
        else:
            op = [x + choice[0], y + choice[1]]
            options.append(op) 
                
    bad = []
    for i in range(len(options)):
        if hist[options[i][0]][options[i][1]][2] != 0:
            bad.append(i)
            
    bad.reverse()
    for i in range(len(bad)):
        options.pop(bad[i])
        
    if level == 1:
        return len(options)
    else:
        return options

# given coordinates (x, y), this function will pass to the next appropriate move
def move(x, y, hist, level):
    
    # Mark our spot
    hist[x][y][2] = level
    
    # figures out eligible moves for location
    moves = options(x, y, hist, 0)
    
    # makes a list of how many moves the following move can make
    #degrees = []
    #for i in moves:
    #    degree = options(i[0], i[1], hist, 1)
    #    degrees.append(degree)
        
    # print iteration information
    #print("------------------------------")
    #printBoard(hist)
    #print("Level = {}".format(level))
    #print("Location = ({}, {})".format(x, y))        
    #print ('move list =', moves)
    #print('degrees = ', degrees)
    #print("options = {}".format(moves))
    
    # Tests if we have filled the board
    #if gameWon(hist):
    #    printBoard(hist)
    #    print ("YOU DID IT")
    #    return True
    
    if (level == len(hist[0]) ** 2):
        print()
        printBoard(hist)
        print()
        return True    
    
    # for testing if the game has gotten to a certain amount of moves
    #elif (level > 15):
    #    return True
    
    # in the case of hitting the end of a route, this format runs
    elif len(moves) == 0:
        
        # first, we want to make sure this misstep is 
        hist[x][y][2] = 0
        #print("no options for ({}, {})! Going Back!".format(x, y))
        #print("-----------------------------------")
        #print("-------END OF PATH (LEVEL: {})-----".format(level))
        #print("-----------------------------------")
        return False
    
    # the typical case of having more options 
    else:
        
        while len(moves) > 0:
            if (move(moves[0][0], moves[0][1], hist, level + 1)):
                return True
            moves.pop(0)
        hist[x][y][2] = 0
        return False 
    
        # until it has no options left, it recursively trials through the options it has
        while len(moves) > 0:
            
            # the next 3 lines make sure that the choice with the most options is 
            # picked next (to avoid hitting dead ends)
            hi = max(degrees)
            hi_i = 0
            for i in range(len(degrees)):
                if degrees[i] == hi:
                    hi_i = i
                    break
            
            #printBoard(hist)
            #print ("hi_i = ", hi_i)
            #print('moves = ', moves)
            if (move(moves[hi_i][0], moves[hi_i][1], hist, level + 1)):
                return True
                break
            moves.pop(hi_i)
            degrees.pop(hi_i)
        
        hist[x][y][2] = 0  
        #print('going down to level {}'.format(level - 1))  
        return False    

def main():
    start = time.time()
    print("\nLet's solve Knights Journey!\n")
    start_x = 5
    start_y = 5
    #choice = input(str("Our starting position will be ({}, {}). Ready?".format(start_x, start_y)))
    #while choice != 'y':
        #choice = input(str("Our starting position will be ({}, {}). Ready?".format(start_x, start_y)))
    size = 8
    board = makeBoard(size, start_x, start_y)
   
    printBoard(board)
    x = move(start_x, start_y, board, 1)
    print(x)
    print("out")
    end = time.time()
    runTime = end - start
    runTimeMin = runTime / 60
    print("Board size = {0} x {0}".format(size))
    print("Start Position = ({}, {})".format(start_x, start_y))
    print("Runtime in seconds = ", runTime) 
    print("Runtime in minutes = ", runTimeMin)
   
main() 