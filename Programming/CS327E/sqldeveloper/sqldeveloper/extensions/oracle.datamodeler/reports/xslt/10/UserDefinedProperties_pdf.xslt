<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/udp" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-0-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-0">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2014 (x64) (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:bookmark-tree>
				<xsl:for-each select="$XML">
					<xsl:for-each select="n1:UDP">
						<xsl:for-each select="n1:UDPCollection">
							<xsl:for-each select="n1:UDPDetails">
								<xsl:for-each select="n1:Name">
									<fo:bookmark>
										<xsl:choose>
											<xsl:when test="starts-with(string(concat(&apos;#&apos;,.)),'#')">
												<xsl:attribute name="internal-destination">
													<xsl:value-of select="substring(string(concat(&apos;#&apos;,.)),2)"/>
												</xsl:attribute>
											</xsl:when>
											<xsl:otherwise>
												<xsl:message terminate="yes">
													<xsl:value-of select="concat('Error: External bookmark destinations (',string(concat(&apos;#&apos;,.)),') are not supported by FOP 0.93/1.0!')"/>
												</xsl:message>
												<xsl:attribute name="external-destination">
													<xsl:value-of select="string(concat(&apos;#&apos;,.))"/>
												</xsl:attribute>
											</xsl:otherwise>
										</xsl:choose>
										<fo:bookmark-title>
											<xsl:variable name="altova:bookmark-title">
												<xsl:variable name="value-of-template_1">
													<xsl:apply-templates/>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="contains(string($value-of-template_1),'&#x200B;')">
														<fo:block font-size="xx-small">
															<xsl:copy-of select="$value-of-template_1"/>
														</fo:block>
													</xsl:when>
													<xsl:otherwise>
														<fo:inline font-size="xx-small">
															<xsl:copy-of select="$value-of-template_1"/>
														</fo:inline>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:value-of select="string($altova:bookmark-title)"/>
										</fo:bookmark-title>
									</fo:bookmark>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</fo:bookmark-tree>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-0" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="20cm"/>
								<fo:table-column column-width="3cm"/>
								<fo:table-column column-width="2cm"/>
								<xsl:variable name="altova:CurrContextGrid_2" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:block>
															<fo:leader leader-pattern="space"/>
														</fo:block>
														<xsl:for-each select="$XML">
															<xsl:for-each select="n1:UDP">
																<xsl:for-each select="n1:CompanyName">
																	<xsl:variable name="value-of-template_3">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_3),'&#x200B;')">
																			<fo:block font-family="Georgia" font-size="8pt" font-weight="bold">
																				<xsl:copy-of select="$value-of-template_3"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline font-family="Georgia" font-size="8pt" font-weight="bold">
																				<xsl:copy-of select="$value-of-template_3"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="right">
														<fo:inline>
															<xsl:text>Oracle Data Modeler&#160; |</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text> / </xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="20cm"/>
								<fo:table-column column-width="3cm"/>
								<fo:table-column column-width="2cm"/>
								<xsl:variable name="altova:CurrContextGrid_2" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:block>
															<fo:leader leader-pattern="space"/>
														</fo:block>
														<xsl:for-each select="$XML">
															<xsl:for-each select="n1:UDP">
																<xsl:for-each select="n1:CompanyName">
																	<xsl:variable name="value-of-template_3">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_3),'&#x200B;')">
																			<fo:block font-family="Georgia" font-size="8pt" font-weight="bold">
																				<xsl:copy-of select="$value-of-template_3"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline font-family="Georgia" font-size="8pt" font-weight="bold">
																				<xsl:copy-of select="$value-of-template_3"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="right">
														<fo:inline>
															<xsl:text>Oracle Data Modeler&#160; |</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text> / </xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" alignment-baseline="before-edge">
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:UDP">
								<xsl:call-template name="Wide_CRLF"/>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:block margin-right="100% - 100%" text-align="center" space-before="0" space-after="0" margin="0pt">
									<xsl:for-each select="n1:ReportCaption">
										<xsl:variable name="value-of-template_4">
											<xsl:apply-templates/>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="contains(string($value-of-template_4),'&#x200B;')">
												<fo:block font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_4"/>
												</fo:block>
											</xsl:when>
											<xsl:otherwise>
												<fo:inline font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_4"/>
												</fo:inline>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</fo:block>
								<xsl:call-template name="Wide_CRLF"/>
								<fo:block/>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table border-collapse="collapse" width="20cm" table-layout="fixed">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="16cm"/>
									<xsl:variable name="altova:CurrContextGrid_5" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Design Name</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_6">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_6),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_6"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_6"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:DesignName) &gt; 0">
																			<xsl:for-each select="n1:DesignName">
																				<xsl:variable name="value-of-template_7">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_7),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_7"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_7"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_8">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_8),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_8"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_8"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_9">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_9),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_9"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_9"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_10">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_10),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_10"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_10"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Version Date</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_11">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_11),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_11"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_11"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:VersionDate) &gt; 0">
																			<xsl:for-each select="n1:VersionDate">
																				<xsl:variable name="value-of-template_12">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_12),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_12"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_12"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_13">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_13),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_13"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_13"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_14">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_14),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_14"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_14"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_15">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_15),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_15"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_15"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Version Comment</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_16">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_16),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_16"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_16"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																				<fo:block/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																			<xsl:for-each select="n1:VersionComment">
																				<xsl:for-each select="n1:VersionCommentDetails">
																					<xsl:for-each select="n1:VersionCommentRow">
																						<xsl:variable name="value-of-template_17">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_17),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_17"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_17"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:choose>
																		<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																			<xsl:for-each select="n1:VersionComment">
																				<xsl:for-each select="n1:VersionCommentDetails">
																					<xsl:for-each select="n1:VersionCommentRow">
																						<xsl:variable name="value-of-template_18">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_18),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_18"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_18"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise/>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_19">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_19),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_19"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_19"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																				<fo:block/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_20">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_20),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_20"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_20"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																				<fo:block/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<xsl:call-template name="Double_CRLF"/>
								<fo:block/>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<xsl:if test="n1:UDPCollection">
									<fo:table border-collapse="collapse" width="25cm" table-layout="fixed">
										<fo:table-column column-width="5cm"/>
										<fo:table-column column-width="5cm"/>
										<fo:table-column column-width="1cm"/>
										<fo:table-column column-width="4cm"/>
										<fo:table-column column-width="4.500cm"/>
										<fo:table-column column-width="3cm"/>
										<fo:table-column column-width="1.500cm"/>
										<xsl:variable name="altova:CurrContextGrid_21" select="."/>
										<fo:table-header background-color="#d9f5ff" start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<fo:table-row>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline font-weight="bold">
																	<xsl:text>Name</xsl:text>
																</fo:inline>
																<fo:block/>
																<fo:inline font-weight="bold">
																	<xsl:text>File Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline font-weight="bold">
																	<xsl:text>Display Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline font-weight="bold">
																	<xsl:text>Type</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline font-weight="bold">
																	<xsl:text>Description</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline font-weight="bold">
																	<xsl:text>Objects</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline font-weight="bold">
																	<xsl:text>List Of Values</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline font-weight="bold">
																	<xsl:text>Default Value</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
												</fo:table-row>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-header>
										<fo:table-body start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<xsl:for-each select="n1:UDPCollection">
													<xsl:for-each select="n1:UDPDetails">
														<fo:table-row>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<fo:block>
																			<xsl:attribute name="id">
																				<xsl:value-of select="n1:Name"/>
																			</xsl:attribute>
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Name">
																						<fo:inline font-weight="bold">
																							<xsl:value-of select="substring-before(.,&apos;/&apos;)"/>
																						</fo:inline>
																						<fo:block/>
																						<fo:block>
																							<fo:leader leader-pattern="space"/>
																						</fo:block>
																						<fo:inline-container>
																							<fo:block>
																								<xsl:text>&#x200B;</xsl:text>
																							</fo:block>
																						</fo:inline-container>
																						<fo:block margin-left="1em" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																							<fo:inline>
																								<xsl:value-of select="substring-after(.,&apos;/&apos;)"/>
																							</fo:inline>
																						</fo:block>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:Name) &gt; 0">
																							<xsl:for-each select="n1:Name">
																								<fo:inline font-weight="bold">
																									<xsl:value-of select="substring-before(.,&apos;/&apos;)"/>
																								</fo:inline>
																								<fo:block/>
																								<fo:block>
																									<fo:leader leader-pattern="space"/>
																								</fo:block>
																								<fo:inline-container>
																									<fo:block>
																										<xsl:text>&#x200B;</xsl:text>
																									</fo:block>
																								</fo:inline-container>
																								<fo:block margin-left="1em" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																									<fo:inline>
																										<xsl:value-of select="substring-after(.,&apos;/&apos;)"/>
																									</fo:inline>
																								</fo:block>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:Name">
																						<fo:inline font-weight="bold">
																							<xsl:value-of select="substring-before(.,&apos;/&apos;)"/>
																						</fo:inline>
																						<fo:block/>
																						<fo:block>
																							<fo:leader leader-pattern="space"/>
																						</fo:block>
																						<fo:inline-container>
																							<fo:block>
																								<xsl:text>&#x200B;</xsl:text>
																							</fo:block>
																						</fo:inline-container>
																						<fo:block margin-left="1em" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																							<fo:inline>
																								<xsl:value-of select="substring-after(.,&apos;/&apos;)"/>
																							</fo:inline>
																						</fo:block>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Name">
																						<fo:inline font-weight="bold">
																							<xsl:value-of select="substring-before(.,&apos;/&apos;)"/>
																						</fo:inline>
																						<fo:block/>
																						<fo:block>
																							<fo:leader leader-pattern="space"/>
																						</fo:block>
																						<fo:inline-container>
																							<fo:block>
																								<xsl:text>&#x200B;</xsl:text>
																							</fo:block>
																						</fo:inline-container>
																						<fo:block margin-left="1em" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																							<fo:inline>
																								<xsl:value-of select="substring-after(.,&apos;/&apos;)"/>
																							</fo:inline>
																						</fo:block>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Name">
																						<fo:inline font-weight="bold">
																							<xsl:value-of select="substring-before(.,&apos;/&apos;)"/>
																						</fo:inline>
																						<fo:block/>
																						<fo:block>
																							<fo:leader leader-pattern="space"/>
																						</fo:block>
																						<fo:inline-container>
																							<fo:block>
																								<xsl:text>&#x200B;</xsl:text>
																							</fo:block>
																						</fo:inline-container>
																						<fo:block margin-left="1em" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																							<fo:inline>
																								<xsl:value-of select="substring-after(.,&apos;/&apos;)"/>
																							</fo:inline>
																						</fo:block>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DisplayName">
																					<xsl:variable name="value-of-template_22">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_22),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_22"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_22"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DisplayName) &gt; 0">
																						<xsl:for-each select="n1:DisplayName">
																							<xsl:variable name="value-of-template_23">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_23),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_23"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_23"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DisplayName">
																					<xsl:variable name="value-of-template_24">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_24),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_24"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_24"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DisplayName">
																					<xsl:variable name="value-of-template_25">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_25),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_25"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_25"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DisplayName">
																					<xsl:variable name="value-of-template_26">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_26),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_26"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_26"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:Type">
																					<xsl:variable name="value-of-template_27">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_27),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_27"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_27"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:Type) &gt; 0">
																						<xsl:for-each select="n1:Type">
																							<xsl:variable name="value-of-template_28">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_28),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_28"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_28"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:Type">
																					<xsl:variable name="value-of-template_29">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_29),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_29"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_29"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:Type">
																					<xsl:variable name="value-of-template_30">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_30),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_30"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_30"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:Type">
																					<xsl:variable name="value-of-template_31">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_31),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_31"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_31"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:Description">
																					<xsl:for-each select="n1:DescriptionDetails">
																						<xsl:for-each select="n1:DescriptionRow">
																							<xsl:variable name="value-of-template_32">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_32),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_32"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_32"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																						<xsl:for-each select="n1:Description">
																							<xsl:for-each select="n1:DescriptionDetails">
																								<xsl:for-each select="n1:DescriptionRow">
																									<xsl:variable name="value-of-template_33">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_33),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_33"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_33"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:Description) &gt; 0">
																						<xsl:for-each select="n1:Description">
																							<xsl:for-each select="n1:DescriptionDetails">
																								<xsl:for-each select="n1:DescriptionRow">
																									<xsl:variable name="value-of-template_34">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_34),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_34"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_34"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise/>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:Description">
																					<xsl:for-each select="n1:DescriptionDetails">
																						<xsl:for-each select="n1:DescriptionRow">
																							<xsl:variable name="value-of-template_35">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_35),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_35"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_35"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:Description">
																					<xsl:for-each select="n1:DescriptionDetails">
																						<xsl:for-each select="n1:DescriptionRow">
																							<xsl:variable name="value-of-template_36">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_36),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_36"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_36"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<xsl:if test="count(n1:ObjectsScopeCollection)">
																			<fo:inline-container>
																				<fo:block>
																					<xsl:text>&#x200B;</xsl:text>
																				</fo:block>
																			</fo:inline-container>
																			<xsl:if test="n1:ObjectsScopeCollection">
																				<fo:table border-collapse="collapse" width="5cm" table-layout="fixed">
																					<fo:table-column column-width="2cm"/>
																					<fo:table-column column-width="1cm"/>
																					<fo:table-column column-width="1cm"/>
																					<xsl:variable name="altova:CurrContextGrid_37" select="."/>
																					<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																						<xsl:variable name="altova:tablerows">
																							<fo:table-row>
																								<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
																									<fo:block-container overflow="hidden">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Object Type</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:block-container>
																								</fo:table-cell>
																								<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
																									<fo:block-container overflow="hidden">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Visible</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:block-container>
																								</fo:table-cell>
																								<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
																									<fo:block-container overflow="hidden">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Color</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:block-container>
																								</fo:table-cell>
																							</fo:table-row>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="string($altova:tablerows)">
																								<xsl:copy-of select="$altova:tablerows"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:table-row>
																									<fo:table-cell>
																										<fo:block/>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:otherwise>
																						</xsl:choose>
																					</fo:table-header>
																					<fo:table-body start-indent="0pt">
																						<xsl:variable name="altova:tablerows">
																							<xsl:for-each select="n1:ObjectsScopeCollection">
																								<xsl:for-each select="n1:ObjectDetails">
																									<fo:table-row>
																										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																											<fo:block-container overflow="hidden">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:Type">
																																<xsl:variable name="value-of-template_38">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_38),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_38"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_38"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:Type) &gt; 0">
																																	<xsl:for-each select="n1:Type">
																																		<xsl:variable name="value-of-template_39">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_39),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_39"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_39"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:Type">
																																<xsl:variable name="value-of-template_40">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_40),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_40"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_40"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:Type">
																																<xsl:variable name="value-of-template_41">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_41),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_41"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_41"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:Type">
																																<xsl:variable name="value-of-template_42">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_42),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_42"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_42"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:block-container>
																										</fo:table-cell>
																										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																											<fo:block-container overflow="hidden">
																												<fo:block text-align="center">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:IsVisible">
																																<xsl:variable name="value-of-template_43">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_43),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_43"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_43"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:IsVisible) &gt; 0">
																																	<xsl:for-each select="n1:IsVisible">
																																		<xsl:variable name="value-of-template_44">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_44),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_44"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_44"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:IsVisible">
																																<xsl:variable name="value-of-template_45">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_45),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_45"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_45"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:IsVisible">
																																<xsl:variable name="value-of-template_46">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_46),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_46"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_46"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:IsVisible">
																																<xsl:variable name="value-of-template_47">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_47),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_47"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_47"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:block-container>
																										</fo:table-cell>
																										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																											<fo:block-container overflow="hidden">
																												<fo:block text-align="center">
																													<fo:inline-container>
																														<fo:block>
																															<xsl:text>&#x200B;</xsl:text>
																														</fo:block>
																													</fo:inline-container>
																													<fo:table border-collapse="collapse" table-layout="fixed" width="100%">
																														<fo:table-column column-width="1cm"/>
																														<xsl:variable name="altova:CurrContextGrid_48" select="."/>
																														<fo:table-body start-indent="0pt">
																															<xsl:variable name="altova:tablerows">
																																<fo:table-row>
																																	<fo:table-cell padding="2pt" display-align="center">
																																		<xsl:variable name="sBackground-color">
																																			<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																																				<xsl:with-param name="sValue" select="n1:Color"/>
																																			</xsl:call-template>
																																		</xsl:variable>
																																		<xsl:if test="$sBackground-color != ''">
																																			<xsl:attribute name="background-color">
																																				<xsl:value-of select="$sBackground-color"/>
																																			</xsl:attribute>
																																		</xsl:if>
																																		<fo:block-container overflow="hidden">
																																			<fo:block text-align="left">
																																				<fo:inline>
																																					<xsl:text>&#160;</xsl:text>
																																				</fo:inline>
																																			</fo:block>
																																		</fo:block-container>
																																	</fo:table-cell>
																																</fo:table-row>
																															</xsl:variable>
																															<xsl:choose>
																																<xsl:when test="string($altova:tablerows)">
																																	<xsl:copy-of select="$altova:tablerows"/>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:table-row>
																																		<fo:table-cell>
																																			<fo:block/>
																																		</fo:table-cell>
																																	</fo:table-row>
																																</xsl:otherwise>
																															</xsl:choose>
																														</fo:table-body>
																													</fo:table>
																												</fo:block>
																											</fo:block-container>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="string($altova:tablerows)">
																								<xsl:copy-of select="$altova:tablerows"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:table-row>
																									<fo:table-cell>
																										<fo:block/>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:otherwise>
																						</xsl:choose>
																					</fo:table-body>
																				</fo:table>
																			</xsl:if>
																		</xsl:if>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<xsl:if test="count(n1:LOVCollection)">
																			<fo:inline-container>
																				<fo:block>
																					<xsl:text>&#x200B;</xsl:text>
																				</fo:block>
																			</fo:inline-container>
																			<xsl:if test="n1:LOVCollection">
																				<fo:table border-collapse="collapse" width="2cm" table-layout="fixed">
																					<fo:table-column column-width="1.500cm"/>
																					<xsl:variable name="altova:CurrContextGrid_49" select="."/>
																					<fo:table-body start-indent="0pt">
																						<xsl:variable name="altova:tablerows">
																							<xsl:for-each select="n1:LOVCollection">
																								<xsl:for-each select="n1:LOVDetails">
																									<fo:table-row>
																										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																											<fo:block-container overflow="hidden">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:Value">
																																<xsl:variable name="value-of-template_50">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_50),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_50"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_50"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:Value) &gt; 0">
																																	<xsl:for-each select="n1:Value">
																																		<xsl:variable name="value-of-template_51">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_51),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_51"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_51"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:Value">
																																<xsl:variable name="value-of-template_52">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_52),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_52"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_52"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:Value">
																																<xsl:variable name="value-of-template_53">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_53),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_53"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_53"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:Value">
																																<xsl:variable name="value-of-template_54">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_54),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_54"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_54"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:block-container>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="string($altova:tablerows)">
																								<xsl:copy-of select="$altova:tablerows"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:table-row>
																									<fo:table-cell>
																										<fo:block/>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:otherwise>
																						</xsl:choose>
																					</fo:table-body>
																				</fo:table>
																			</xsl:if>
																		</xsl:if>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DefaultValue">
																					<xsl:variable name="value-of-template_55">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_55),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_55"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_55"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DefaultValue) &gt; 0">
																						<xsl:for-each select="n1:DefaultValue">
																							<xsl:variable name="value-of-template_56">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_56),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_56"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_56"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DefaultValue">
																					<xsl:variable name="value-of-template_57">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_57),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_57"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_57"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DefaultValue">
																					<xsl:variable name="value-of-template_58">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_58),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_58"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_58"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DefaultValue">
																					<xsl:variable name="value-of-template_59">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_59),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_59"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_59"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
														</fo:table-row>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-body>
									</fo:table>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="Single_CRLF">
		<fo:inline-container>
			<fo:block>
				<xsl:text>&#x200B;</xsl:text>
			</fo:block>
		</fo:inline-container>
		<fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
			<fo:inline>
				<xsl:text>&#160;</xsl:text>
			</fo:inline>
		</fo:block>
	</xsl:template>
	<xsl:template name="Double_CRLF">
		<xsl:choose>
			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
				<xsl:call-template name="Single_CRLF"/>
			</xsl:when>
			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;"/>
			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;"/>
			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
				<xsl:call-template name="Single_CRLF"/>
			</xsl:when>
			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
				<xsl:call-template name="Single_CRLF"/>
			</xsl:when>
		</xsl:choose>
		<fo:block/>
	</xsl:template>
	<xsl:template name="Wide_CRLF">
		<fo:block>
			<fo:leader leader-pattern="space"/>
		</fo:block>
		<fo:inline-container>
			<fo:block>
				<xsl:text>&#x200B;</xsl:text>
			</fo:block>
		</fo:inline-container>
		<fo:block margin-bottom="0.7em" margin-top="0.7em" margin-right="100% - 100%" margin="0pt"/>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
